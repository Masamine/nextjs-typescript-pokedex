import { css } from '@emotion/react'
import { union } from 'lodash'
import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react'
import { useRecoilState } from 'recoil'
import Pokemon from '@/components/Pokemon'
import { getPokemons } from '@/lib/pokemon'
import { generationState, useRecoilGeneration } from '@/state/selectGeneration'
import styles from '@/styles/Home.module.css'
import { Colors, Pokemons, PokeType, IdName } from '@/types/typeList'

const itemsStyle = css`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, auto));
  grid-gap: 0;
  justify-content: center;
  align-items: center;
  justify-items: center;
  place-items: center;
  margin-top: 30px;
`

const typeListStyle = css`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 30px;
`

const typeStyle = css`
  font-size: 16px;
  margin: 0 8px 5px;
  cursor: pointer;
  &[data-selected='true'] {
    color: #ffffff;
    text-shadow: 0 0 5px #0070f3, 0 0 10px #0070f3, 0 0 10px #0070f3, 0 0 5px #0070f3,
      0 0 10px #0070f3, 0 0 10px #0070f3;
  }
`

const generateStyle = css`
  font-size: 16px;
  margin: 0 15px 5px;
  cursor: pointer;
  &[data-selected='true'] {
    color: #ffffff;
    text-shadow: 0 0 5px #ff87ad, 0 0 10px #ff87ad, 0 0 10px #ff87ad, 0 0 5px #ff87ad,
      0 0 10px #ff87ad, 0 0 10px #ff87ad;
  }
`

const countStyle = css`
  font-size: 28px;
  font-weight: bold;
  text-align: center;
  margin-top: 20px;
`

const loadingStyle = css`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 100;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #000;
  transition: opacity 2s ease-out;
  img {
    width: 64px;
    animation: loading 160s linear infinite;
  }
  &[data-active='true'] {
    transition-delay: 4s;
    opacity: 0;
    pointer-events: none;
    img {
      animation-duration: 18.2s;
      animation-timing-function: ease-in;
    }
  }
`

const typeName: Colors = {
  bug: 'むし',
  dark: 'あく',
  dragon: 'ドラゴン',
  electric: 'でんき',
  fairy: 'フェアリー',
  fighting: 'かくとう',
  fire: 'ほのお',
  flying: 'ひこう',
  ghost: 'ゴースト',
  grass: 'くさ',
  ground: 'じめん',
  ice: 'こおり',
  normal: 'ノーマル',
  poison: 'どく',
  psychic: 'エスパー',
  rock: 'いわ',
  steel: 'はがね',
  water: 'みず',
}

const generationName = {
  'generation-i': '赤・緑・青・黄',
  'generation-ii': '金・銀・クリスタル',
  'generation-iii': 'ルビー・サファイア・エメラルド',
}

const Home: NextPage<Pokemons> = (props) => {
  const [isLoaded, setIsLoaded] = useState(false)
  const [pokeType, setType] = useState('')
  const [basePokemons] = useState(props.pokemons)
  const [pokemons, setPokemons] = useState(props.pokemons)
  const [generation, setGeneration] = useRecoilState(generationState)

  const selectId = (id: string, isType: boolean = true) => {
    isType ? setType(id) : setGeneration(id)
  }
  useEffect(() => {
    const result =
      pokeType || generation
        ? basePokemons.filter((pokemon) => {
          const hasType = pokeType
            ? pokemon.types.map((item) => {
              return item.type.name === pokeType
            })
            : [true]
          const hasGeneration = generation ? pokemon.generation === generation : true
          if (generation) {
            setGeneration(generation)
          }
          return hasType.includes(true) && hasGeneration
        })
        : basePokemons

    setPokemons(result)
    setTimeout(() => {
      setIsLoaded(true)
    }, 2000)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pokeType, generation])

  useEffect(() => {
    const setTest = (text: string): IdName => {
      return { id: 0, name: text }
    }
    console.log(setTest('a6s4d6a5s'))
  }, [])


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to{' '}
          <a href='https://nextjs.org' target='_blank' rel='noreferrer'>
            Next.js
          </a>{' '}
          &{' '}
          <a href='https://www.typescriptlang.org/' target='_blank' rel='noreferrer'>
            TypeScript
          </a>
          !
        </h1>
        {/* <Link href='/zukan'>
          <a>ZUKAN</a>
        </Link> */}
        <div className='items' css={typeListStyle}>
          <p
            css={generateStyle}
            onClick={() => {
              selectId('', false)
            }}
            data-selected={generation === ''}
          >
            すべて
          </p>
          {props.generations.map((item) => (
            <p
              css={generateStyle}
              key={item}
              onClick={() => {
                selectId(item, false)
              }}
              data-selected={generation === item}
            >
              {generationName[item]}
            </p>
          ))}
        </div>
        <div className='items' css={typeListStyle}>
          <p
            css={typeStyle}
            onClick={() => {
              selectId('')
            }}
            data-selected={pokeType === ''}
          >
            すべて
          </p>
          {props.types.map((item) => (
            <p
              css={typeStyle}
              key={item}
              onClick={() => {
                selectId(item)
              }}
              data-selected={pokeType === item}
            >
              {typeName[item]}
            </p>
          ))}
        </div>
        <p css={countStyle}>{pokemons.length}匹</p>
        <div className='items' css={itemsStyle}>
          {pokemons.map((item) => (
            <Pokemon poke={item} key={item.id} />
          ))}
        </div>
      </main>
      <div className='loading image' css={loadingStyle} data-active={isLoaded}>
        <img src='/assets/img/loading.png' />
      </div>
    </div>
  )
}

export async function getStaticProps() {
  const pokemons = await getPokemons()
  const types = pokemons.map((poke) => {
    return poke.types.map((item: PokeType) => {
      return item.type.name
    })
  })
  const typeArray = union(types.join().split(','))

  const generations = pokemons.map((poke) => poke.generation)
  const generationsArray = union(generations.join().split(','))

  return {
    props: {
      pokemons,
      types: [...typeArray],
      generations: [...generationsArray],
    },
  }
}

export default Home
